{"ast":null,"code":"/*! @azure/msal-common v9.1.1 2023-01-19 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { AuthenticationScheme, GrantType, HeaderNames, Errors } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { ServerError } from '../error/ServerError.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from '../error/InteractionRequiredAuthError.js';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * OAuth2.0 refresh token client\r\n */\nvar RefreshTokenClient = /** @class */function (_super) {\n  __extends(RefreshTokenClient, _super);\n  function RefreshTokenClient(configuration, performanceClient) {\n    return _super.call(this, configuration, performanceClient) || this;\n  }\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    var _a, _b, _c, _d;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, requestId, responseHandler;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\n            this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(request, this.authority)];\n          case 1:\n            response = _e.sent();\n            httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              refreshTokenSize: ((_c = response.body.refresh_token) === null || _c === void 0 ? void 0 : _c.length) || 0\n            });\n            if (httpVerToken) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerToken: httpVerToken\n              });\n            }\n            requestId = (_d = response.headers) === null || _d === void 0 ? void 0 : _d[HeaderNames.X_MS_REQUEST_ID];\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError.createEmptyTokenRequestError();\n        }\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n        if (!request.account) {\n          throw ClientAuthError.createNoAccountInSilentRequestError();\n        }\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n        if (isFOCI) {\n          try {\n            return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\n            // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n              // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        }\n        // fall back to application refresh token acquisition\n        return [2 /*return*/, this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, refreshToken, refreshTokenRequest;\n      return __generator(this, function (_b) {\n        atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\n        if (!refreshToken) {\n          atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.discardMeasurement();\n          throw InteractionRequiredAuthError.createNoTokensFoundError();\n        }\n        // attach cached RT size to the current measurement\n        atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n          success: true\n        });\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2 /*return*/, this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenMeasurement, requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _b.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint).then(function (result) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var correlationId, acquireTokenMeasurement, parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, clientInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            correlationId = request.correlationId;\n            acquireTokenMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n                  success: false\n                });\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _b.label = 3;\n          case 3:\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n            acquireTokenMeasurement === null || acquireTokenMeasurement === void 0 ? void 0 : acquireTokenMeasurement.endMeasurement({\n              success: true\n            });\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  return RefreshTokenClient;\n}(BaseClient);\nexport { RefreshTokenClient };","map":{"version":3,"mappings":"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","names":["__extends","RefreshTokenClient","performanceClient","_super","request","atsMeasurement","startMeasurement","PerformanceEvents","RefreshTokenClientAcquireToken","correlationId","logger","verbose","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_e","httpVerToken","headers","HeaderNames","X_MS_HTTP_VERSION","addStaticFields","refreshTokenSize","body","refresh_token","length","requestId","X_MS_REQUEST_ID","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","handleServerTokenResponse","undefined","forceCache","then","result","endMeasurement","success","catch","error","_this","errorCode","subErrorCode","subError","ClientConfigurationError","createEmptyTokenRequestError","account","ClientAuthError","createNoAccountInSilentRequestError","isFOCI","isAppMetadataFOCI","environment","acquireTokenWithCachedRefreshToken","e","noFamilyRTInCache","InteractionRequiredAuthError","InteractionRequiredAuthErrorMessage","noTokensFoundError","code","clientMismatchErrorWithFamilyRT","ServerError","Errors","INVALID_GRANT_ERROR","CLIENT_MISMATCH_ERROR","foci","RefreshTokenClientAcquireTokenWithCachedRefreshToken","refreshToken","readRefreshTokenFromCache","discardMeasurement","createNoTokensFoundError","refreshTokenRequest","secret","authenticationScheme","AuthenticationScheme","BEARER","ccsCredential","credential","homeAccountId","type","CcsCredentialType","HOME_ACCOUNT_ID","acquireToken","acquireTokenMeasurement","RefreshTokenClientExecuteTokenRequest","createTokenRequestBody","requestBody","_b","queryParameters","createTokenQueryParameters","createTokenRequestHeaders","thumbprint","canonicalAuthority","scopes","claims","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","endpoint","UrlString","appendQueryString","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","BaseClientCreateTokenRequestHeaders","addClientId","addScopes","addGrantType","GrantType","REFRESH_TOKEN_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","addCorrelationId","addRefreshToken","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","StringUtils","isEmptyObj","clientCapabilities","addClaims","systemOptions","preventCorsPreflight","clientInfo","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","BaseClient"],"sources":["/home/user/mischangas/node_modules/@azure/msal-common/src/client/RefreshTokenClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, Errors, HeaderNames } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\r\nimport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage } from \"../error/InteractionRequiredAuthError\";\r\nimport { PerformanceEvents } from \"../telemetry/performance/PerformanceEvent\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nexport class RefreshTokenClient extends BaseClient {\r\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        super(configuration, performanceClient);\r\n\r\n    }\r\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult> {\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n        this.logger.verbose(\"RefreshTokenClientAcquireToken called\", request.correlationId);\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(request, this.authority);\r\n        const httpVerToken = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\r\n        atsMeasurement?.addStaticFields({\r\n            refreshTokenSize: response.body.refresh_token?.length || 0,\r\n        });\r\n        if(httpVerToken)\r\n        {\r\n            atsMeasurement?.addStaticFields({\r\n                httpVerToken,\r\n            });\r\n        }\r\n\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n        responseHandler.validateTokenResponse(response.body);\r\n\r\n        return responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            undefined,\r\n            true,\r\n            request.forceCache,\r\n            requestId,\r\n        ).then((result: AuthenticationResult) => {\r\n            atsMeasurement?.endMeasurement({\r\n                success: true\r\n            });\r\n            return result;\r\n        })\r\n            .catch((error) => {\r\n                this.logger.verbose(\"Error in fetching refresh token\", request.correlationId);\r\n                atsMeasurement?.endMeasurement({\r\n                    errorCode: error.errorCode,\r\n                    subErrorCode: error.subError,\r\n                    success: false\r\n                });\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\r\n\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return this.acquireTokenWithCachedRefreshToken(request, true);\r\n            } catch (e) {\r\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError && e.errorCode === InteractionRequiredAuthErrorMessage.noTokensFoundError.code;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\r\n                    // throw in all other cases\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        // fall back to application refresh token acquisition\r\n        return this.acquireTokenWithCachedRefreshToken(request, false);\r\n\r\n    }\r\n\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\r\n        // fetches family RT or application RT based on FOCI value\r\n\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n        this.logger.verbose(\"RefreshTokenClientAcquireTokenWithCachedRefreshToken called\", request.correlationId);\r\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\r\n\r\n        if (!refreshToken) {\r\n            atsMeasurement?.discardMeasurement();\r\n            throw InteractionRequiredAuthError.createNoTokensFoundError();\r\n        }\r\n        // attach cached RT size to the current measurement\r\n        atsMeasurement?.endMeasurement({\r\n            success: true\r\n        });\r\n\r\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            }\r\n        };\r\n\r\n        return this.acquireToken(refreshTokenRequest);\r\n    }\r\n\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\r\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const queryParameters = this.createTokenQueryParameters(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)\r\n            .then((result) => {\r\n                acquireTokenMeasurement?.endMeasurement({\r\n                    success: true\r\n                });\r\n                return result;\r\n            })\r\n            .catch((error) => {\r\n                acquireTokenMeasurement?.endMeasurement({\r\n                    success: false\r\n                });\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\r\n        const correlationId = request.correlationId;\r\n        const acquireTokenMeasurement = this.performanceClient?.startMeasurement(PerformanceEvents.BaseClientCreateTokenRequestHeaders, correlationId);\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRefreshToken(request.refreshToken);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                parameterBuilder.addSshJwk(request.sshJwk);\r\n            } else {\r\n                acquireTokenMeasurement?.endMeasurement({\r\n                    success: false\r\n                });\r\n                throw ClientConfigurationError.createMissingSshJwkError();\r\n            }\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n        acquireTokenMeasurement?.endMeasurement({\r\n            success: true\r\n        });\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}