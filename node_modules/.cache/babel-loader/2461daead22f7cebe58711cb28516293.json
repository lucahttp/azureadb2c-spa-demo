{"ast":null,"code":"/*! @azure/msal-common v9.1.1 2023-01-19 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.js';\nimport { NetworkManager } from '../network/NetworkManager.js';\nimport { Logger } from '../logger/Logger.js';\nimport { HeaderNames, Constants } from '../utils/Constants.js';\nimport { name, version } from '../packageMetadata.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\nvar BaseClient = /** @class */function () {\n  function BaseClient(configuration, performanceClient) {\n    // Set the configuration\n    this.config = buildClientConfiguration(configuration);\n    // Initialize the logger\n    this.logger = new Logger(this.config.loggerOptions, name, version);\n    // Initialize crypto\n    this.cryptoUtils = this.config.cryptoInterface;\n    // Initialize storage interface\n    this.cacheManager = this.config.storageInterface;\n    // Set the network interface\n    this.networkClient = this.config.networkInterface;\n    // Set the NetworkManager\n    this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\n    // Set TelemetryManager\n    this.serverTelemetryManager = this.config.serverTelemetryManager;\n    // set Authority\n    this.authority = this.config.authOptions.authority;\n    // set performance telemetry client\n    this.performanceClient = performanceClient;\n  }\n  /**\r\n   * Creates default headers for requests to token endpoint\r\n   */\n  BaseClient.prototype.createTokenRequestHeaders = function (ccsCred) {\n    var headers = {};\n    headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\n    if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\n      switch (ccsCred.type) {\n        case CcsCredentialType.HOME_ACCOUNT_ID:\n          try {\n            var clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n            headers[HeaderNames.CCS_HEADER] = \"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid;\n          } catch (e) {\n            this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n          }\n          break;\n        case CcsCredentialType.UPN:\n          headers[HeaderNames.CCS_HEADER] = \"UPN: \" + ccsCred.credential;\n          break;\n      }\n    }\n    return headers;\n  };\n  /**\r\n   * Http post to token endpoint\r\n   * @param tokenEndpoint\r\n   * @param queryString\r\n   * @param headers\r\n   * @param thumbprint\r\n   */\n  BaseClient.prototype.executePostToTokenEndpoint = function (tokenEndpoint, queryString, headers, thumbprint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.networkManager.sendPostRequest(thumbprint, tokenEndpoint, {\n              body: queryString,\n              headers: headers,\n              proxyUrl: this.config.systemOptions.proxyUrl\n            })];\n          case 1:\n            response = _a.sent();\n            if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\n              // Telemetry data successfully logged by server, clear Telemetry cache\n              this.config.serverTelemetryManager.clearTelemetryCache();\n            }\n            return [2 /*return*/, response];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates the authority object of the client. Endpoint discovery must be completed.\r\n   * @param updatedAuthority\r\n   */\n  BaseClient.prototype.updateAuthority = function (updatedAuthority) {\n    if (!updatedAuthority.discoveryComplete()) {\n      throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\n    }\n    this.authority = updatedAuthority;\n  };\n  return BaseClient;\n}();\nexport { BaseClient };","map":{"version":3,"mappings":"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","names":["BaseClient","performanceClient","config","buildClientConfiguration","configuration","logger","Logger","loggerOptions","name","version","cryptoUtils","cryptoInterface","cacheManager","storageInterface","networkClient","networkInterface","networkManager","NetworkManager","serverTelemetryManager","authority","authOptions","ccsCred","headers","HeaderNames","CONTENT_TYPE","Constants","URL_FORM_CONTENT_TYPE","systemOptions","preventCorsPreflight","type","CcsCredentialType","HOME_ACCOUNT_ID","clientInfo","buildClientInfoFromHomeAccountId","credential","CCS_HEADER","uid","utid","e","verbose","UPN","tokenEndpoint","queryString","thumbprint","sendPostRequest","body","proxyUrl","response","_a","status","clearTelemetryCache","updatedAuthority","discoveryComplete","ClientAuthError","createEndpointDiscoveryIncompleteError"],"sources":["/home/user/mischangas/node_modules/@azure/msal-common/src/client/BaseClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration, buildClientConfiguration, CommonClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { NetworkManager, NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { Logger } from \"../logger/Logger\";\r\nimport { Constants, HeaderNames } from \"../utils/Constants\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { version, name } from \"../packageMetadata\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { CcsCredential, CcsCredentialType } from \"../account/CcsCredential\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\n\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n */\r\nexport abstract class BaseClient {\r\n    // Logger object\r\n    public logger: Logger;\r\n\r\n    // Application config\r\n    protected config: CommonClientConfiguration;\r\n\r\n    // Crypto Interface\r\n    protected cryptoUtils: ICrypto;\r\n\r\n    // Storage Interface\r\n    protected cacheManager: CacheManager;\r\n\r\n    // Network Interface\r\n    protected networkClient: INetworkModule;\r\n\r\n    // Server Telemetry Manager\r\n    protected serverTelemetryManager: ServerTelemetryManager | null;\r\n\r\n    // Network Manager\r\n    protected networkManager: NetworkManager;\r\n\r\n    // Default authority object\r\n    public authority: Authority;\r\n\r\n    // Performance telemetry client\r\n    protected performanceClient?: IPerformanceClient;\r\n\r\n    protected constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n\r\n        // Set the NetworkManager\r\n        this.networkManager = new NetworkManager(this.networkClient, this.cacheManager);\r\n\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n\r\n        // set performance telemetry client\r\n        this.performanceClient = performanceClient;\r\n    }\r\n\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    protected createTokenRequestHeaders(ccsCred?: CcsCredential): Record<string, string> {   \r\n        const headers: Record<string, string> = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\r\n                    break;\r\n            }\r\n        }   \r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    protected async executePostToTokenEndpoint(tokenEndpoint: string, queryString: string, headers: Record<string, string>, thumbprint: RequestThumbprint): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const response = await this.networkManager.sendPostRequest<ServerAuthorizationTokenResponse>(\r\n            thumbprint,\r\n            tokenEndpoint,\r\n            { body: queryString, headers: headers, proxyUrl: this.config.systemOptions.proxyUrl }\r\n        );\r\n\r\n        if (this.config.serverTelemetryManager && response.status < 500 && response.status !== 429) {\r\n            // Telemetry data successfully logged by server, clear Telemetry cache\r\n            this.config.serverTelemetryManager.clearTelemetryCache();\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    updateAuthority(updatedAuthority: Authority): void {\r\n        if (!updatedAuthority.discoveryComplete()) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(\"Updated authority has not completed endpoint discovery.\");\r\n        }\r\n        this.authority = updatedAuthority;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}