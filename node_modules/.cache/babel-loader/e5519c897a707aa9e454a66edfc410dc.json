{"ast":null,"code":"/*! @azure/msal-common v9.1.1 2023-01-19 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { OIDC_SCOPES, Constants } from '../utils/Constants.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\nvar ScopeSet = /** @class */function () {\n  function ScopeSet(inputScopes) {\n    var _this = this;\n    // Filter empty string and null/undefined array items\n    var scopeArr = inputScopes ? StringUtils.trimArrayEntries(__spreadArrays(inputScopes)) : [];\n    var filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\n    // Validate and filter scopes (validate function throws if validation fails)\n    this.validateInputScopes(filteredInput);\n    this.scopes = new Set(); // Iterator in constructor not supported by IE11\n    filteredInput.forEach(function (scope) {\n      return _this.scopes.add(scope);\n    });\n  }\n  /**\r\n   * Factory method to create ScopeSet from space-delimited string\r\n   * @param inputScopeString\r\n   * @param appClientId\r\n   * @param scopesRequired\r\n   */\n  ScopeSet.fromString = function (inputScopeString) {\n    var scopeString = inputScopeString || Constants.EMPTY_STRING;\n    var inputScopes = scopeString.split(\" \");\n    return new ScopeSet(inputScopes);\n  };\n  /**\r\n   * Used to validate the scopes input parameter requested  by the developer.\r\n   * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n   * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n   */\n  ScopeSet.prototype.validateInputScopes = function (inputScopes) {\n    // Check if scopes are required but not given or is an empty array\n    if (!inputScopes || inputScopes.length < 1) {\n      throw ClientConfigurationError.createEmptyScopesArrayError();\n    }\n  };\n  /**\r\n   * Check if a given scope is present in this set of scopes.\r\n   * @param scope\r\n   */\n  ScopeSet.prototype.containsScope = function (scope) {\n    var lowerCaseScopes = this.printScopesLowerCase().split(\" \");\n    var lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\n    // compare lowercase scopes\n    return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\n  };\n  /**\r\n   * Check if a set of scopes is present in this set of scopes.\r\n   * @param scopeSet\r\n   */\n  ScopeSet.prototype.containsScopeSet = function (scopeSet) {\n    var _this = this;\n    if (!scopeSet || scopeSet.scopes.size <= 0) {\n      return false;\n    }\n    return this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(function (scope) {\n      return _this.containsScope(scope);\n    });\n  };\n  /**\r\n   * Check if set of scopes contains only the defaults\r\n   */\n  ScopeSet.prototype.containsOnlyOIDCScopes = function () {\n    var _this = this;\n    var defaultScopeCount = 0;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      if (_this.containsScope(defaultScope)) {\n        defaultScopeCount += 1;\n      }\n    });\n    return this.scopes.size === defaultScopeCount;\n  };\n  /**\r\n   * Appends single scope if passed\r\n   * @param newScope\r\n   */\n  ScopeSet.prototype.appendScope = function (newScope) {\n    if (!StringUtils.isEmpty(newScope)) {\n      this.scopes.add(newScope.trim());\n    }\n  };\n  /**\r\n   * Appends multiple scopes if passed\r\n   * @param newScopes\r\n   */\n  ScopeSet.prototype.appendScopes = function (newScopes) {\n    var _this = this;\n    try {\n      newScopes.forEach(function (newScope) {\n        return _this.appendScope(newScope);\n      });\n    } catch (e) {\n      throw ClientAuthError.createAppendScopeSetError(e);\n    }\n  };\n  /**\r\n   * Removes element from set of scopes.\r\n   * @param scope\r\n   */\n  ScopeSet.prototype.removeScope = function (scope) {\n    if (StringUtils.isEmpty(scope)) {\n      throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\n    }\n    this.scopes.delete(scope.trim());\n  };\n  /**\r\n   * Removes default scopes from set of scopes\r\n   * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n   */\n  ScopeSet.prototype.removeOIDCScopes = function () {\n    var _this = this;\n    OIDC_SCOPES.forEach(function (defaultScope) {\n      _this.scopes.delete(defaultScope);\n    });\n  };\n  /**\r\n   * Combines an array of scopes with the current set of scopes.\r\n   * @param otherScopes\r\n   */\n  ScopeSet.prototype.unionScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    var unionScopes = new Set(); // Iterator in constructor not supported in IE11\n    otherScopes.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    this.scopes.forEach(function (scope) {\n      return unionScopes.add(scope.toLowerCase());\n    });\n    return unionScopes;\n  };\n  /**\r\n   * Check if scopes intersect between this set and another.\r\n   * @param otherScopes\r\n   */\n  ScopeSet.prototype.intersectingScopeSets = function (otherScopes) {\n    if (!otherScopes) {\n      throw ClientAuthError.createEmptyInputScopeSetError();\n    }\n    // Do not allow OIDC scopes to be the only intersecting scopes\n    if (!otherScopes.containsOnlyOIDCScopes()) {\n      otherScopes.removeOIDCScopes();\n    }\n    var unionScopes = this.unionScopeSets(otherScopes);\n    var sizeOtherScopes = otherScopes.getScopeCount();\n    var sizeThisScopes = this.getScopeCount();\n    var sizeUnionScopes = unionScopes.size;\n    return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\n  };\n  /**\r\n   * Returns size of set of scopes.\r\n   */\n  ScopeSet.prototype.getScopeCount = function () {\n    return this.scopes.size;\n  };\n  /**\r\n   * Returns the scopes as an array of string values\r\n   */\n  ScopeSet.prototype.asArray = function () {\n    var array = [];\n    this.scopes.forEach(function (val) {\n      return array.push(val);\n    });\n    return array;\n  };\n  /**\r\n   * Prints scopes into a space-delimited string\r\n   */\n  ScopeSet.prototype.printScopes = function () {\n    if (this.scopes) {\n      var scopeArr = this.asArray();\n      return scopeArr.join(\" \");\n    }\n    return Constants.EMPTY_STRING;\n  };\n  /**\r\n   * Prints scopes into a space-delimited lower-case string (used for caching)\r\n   */\n  ScopeSet.prototype.printScopesLowerCase = function () {\n    return this.printScopes().toLowerCase();\n  };\n  return ScopeSet;\n}();\nexport { ScopeSet };","map":{"version":3,"mappings":"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","names":["inputScopes","_this","scopeArr","StringUtils","trimArrayEntries","filteredInput","removeEmptyStringsFromArray","validateInputScopes","scopes","Set","forEach","add","scope","ScopeSet","inputScopeString","scopeString","Constants","EMPTY_STRING","split","length","ClientConfigurationError","createEmptyScopesArrayError","lowerCaseScopes","printScopesLowerCase","lowerCaseScopesSet","isEmpty","has","toLowerCase","scopeSet","size","asArray","every","containsScope","defaultScopeCount","OIDC_SCOPES","defaultScope","newScope","trim","newScopes","appendScope","e","ClientAuthError","createAppendScopeSetError","createRemoveEmptyScopeFromSetError","delete","otherScopes","createEmptyInputScopeSetError","unionScopes","containsOnlyOIDCScopes","removeOIDCScopes","unionScopeSets","sizeOtherScopes","getScopeCount","sizeThisScopes","sizeUnionScopes","array","push","val","join","printScopes"],"sources":["/home/user/mischangas/node_modules/@azure/msal-common/src/request/ScopeSet.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { Constants, OIDC_SCOPES } from \"../utils/Constants\";\r\n\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nexport class ScopeSet {\r\n    // Scopes as a Set of strings\r\n    private scopes: Set<string>;\r\n\r\n    constructor(inputScopes: Array<string>) {\r\n        // Filter empty string and null/undefined array items\r\n        const scopeArr = inputScopes ? StringUtils.trimArrayEntries([...inputScopes]) : [];\r\n        const filteredInput = scopeArr ? StringUtils.removeEmptyStringsFromArray(scopeArr) : [];\r\n\r\n        // Validate and filter scopes (validate function throws if validation fails)\r\n        this.validateInputScopes(filteredInput);\r\n\r\n        this.scopes = new Set<string>(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach(scope => this.scopes.add(scope));\r\n    }\r\n\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    static fromString(inputScopeString: string): ScopeSet {\r\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\r\n        const inputScopes: Array<string> = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    }\r\n\r\n    /**\r\n     * Used to validate the scopes input parameter requested  by the developer.\r\n     * @param {Array<string>} inputScopes - Developer requested permissions. Not all scopes are guaranteed to be included in the access token returned.\r\n     * @param {boolean} scopesRequired - Boolean indicating whether the scopes array is required or not\r\n     */\r\n    private validateInputScopes(inputScopes: Array<string>): void {\r\n        // Check if scopes are required but not given or is an empty array\r\n        if (!inputScopes || inputScopes.length < 1) {\r\n            throw ClientConfigurationError.createEmptyScopesArrayError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    containsScope(scope: string): boolean {\r\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return !StringUtils.isEmpty(scope) ? lowerCaseScopesSet.scopes.has(scope.toLowerCase()) : false;\r\n    }\r\n\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    containsScopeSet(scopeSet: ScopeSet): boolean {\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n\r\n        return (this.scopes.size >= scopeSet.scopes.size && scopeSet.asArray().every(scope => this.containsScope(scope)));\r\n    }\r\n\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    containsOnlyOIDCScopes(): boolean {\r\n        let defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach((defaultScope: string) => {\r\n            if (this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n\r\n        return this.scopes.size === defaultScopeCount;\r\n    }\r\n\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    appendScope(newScope: string): void {\r\n        if (!StringUtils.isEmpty(newScope)) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    appendScopes(newScopes: Array<string>): void {\r\n        try {\r\n            newScopes.forEach(newScope => this.appendScope(newScope));\r\n        } catch (e) {\r\n            throw ClientAuthError.createAppendScopeSetError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    removeScope(scope: string): void {\r\n        if (StringUtils.isEmpty(scope)) {\r\n            throw ClientAuthError.createRemoveEmptyScopeFromSetError(scope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    }\r\n\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    removeOIDCScopes(): void {\r\n        OIDC_SCOPES.forEach((defaultScope: string) => {\r\n            this.scopes.delete(defaultScope);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    unionScopeSets(otherScopes: ScopeSet): Set<string> {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        const unionScopes = new Set<string>(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\r\n        this.scopes.forEach(scope => unionScopes.add(scope.toLowerCase()));\r\n        return unionScopes;\r\n    }\r\n\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    intersectingScopeSets(otherScopes: ScopeSet): boolean {\r\n        if (!otherScopes) {\r\n            throw ClientAuthError.createEmptyInputScopeSetError();\r\n        }\r\n        \r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        const unionScopes = this.unionScopeSets(otherScopes);\r\n        const sizeOtherScopes = otherScopes.getScopeCount();\r\n        const sizeThisScopes = this.getScopeCount();\r\n        const sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < (sizeThisScopes + sizeOtherScopes);\r\n    }\r\n\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    getScopeCount(): number {\r\n        return this.scopes.size;\r\n    }\r\n\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    asArray(): Array<string> {\r\n        const array: Array<string> = [];\r\n        this.scopes.forEach(val => array.push(val));\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    printScopes(): string {\r\n        if (this.scopes) {\r\n            const scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    printScopesLowerCase(): string {\r\n        return this.printScopes().toLowerCase();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}