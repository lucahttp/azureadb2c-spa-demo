{"ast":null,"code":"/*! @azure/msal-common v9.1.1 2023-01-19 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { GrantType, HeaderNames } from '../utils/Constants.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\nvar UsernamePasswordClient = /** @class */function (_super) {\n  __extends(UsernamePasswordClient, _super);\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, httpVerToken, responseHandler, tokenResponse;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in username-password client\");\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _c.sent();\n            httpVerToken = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_HTTP_VERSION];\n            atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n              httpVerToken: httpVerToken\n            });\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2 /*return*/, tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes,\n          claims: request.claims,\n          authenticationScheme: request.authenticationScheme,\n          resourceRequestMethod: request.resourceRequestMethod,\n          resourceRequestUri: request.resourceRequestUri,\n          shrClaims: request.shrClaims,\n          sshKid: request.sshKid\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2 /*return*/, this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addResponseTypeForTokenAndIdToken();\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n    parameterBuilder.addThrottling();\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n    if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  return UsernamePasswordClient;\n}(BaseClient);\nexport { UsernamePasswordClient };","map":{"version":3,"mappings":"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","names":["__extends","configuration","UsernamePasswordClient","request","atsMeasurement","performanceClient","correlationId","logger","info","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","authority","response","_c","httpVerToken","headers","HeaderNames","X_MS_HTTP_VERSION","addStaticFields","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","tokenResponse","handleServerTokenResponse","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","requestBody","createTokenRequestBody","createTokenRequestHeaders","credential","username","type","CcsCredentialType","UPN","executePostToTokenEndpoint","tokenEndpoint","parameterBuilder","RequestParameterBuilder","addClientId","addUsername","addPassword","password","addScopes","addResponseTypeForTokenAndIdToken","addGrantType","GrantType","RESOURCE_OWNER_PASSWORD_GRANT","addClientInfo","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","cryptoInterface","createNewGuid","addCorrelationId","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","StringUtils","isEmptyObj","clientCapabilities","length","addClaims","systemOptions","preventCorsPreflight","addCcsUpn","createQueryString","BaseClient"],"sources":["/home/user/mischangas/node_modules/@azure/msal-common/src/client/UsernamePasswordClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, HeaderNames } from \"../utils/Constants\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\n\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nexport class UsernamePasswordClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\r\n        // @ts-ignore\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(\"UsernamePasswordClientAcquireToken\", request.correlationId);\r\n        this.logger.info(\"in acquireToken call in username-password client\");\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        const httpVerToken = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\r\n        atsMeasurement?.addStaticFields({\r\n            httpVerToken\r\n        });\r\n    \r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\r\n            credential: request.username,\r\n            type: CcsCredentialType.UPN\r\n        });\r\n\r\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addResponseTypeForTokenAndIdToken();\r\n\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}