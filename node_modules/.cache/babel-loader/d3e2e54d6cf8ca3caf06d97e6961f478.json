{"ast":null,"code":"/*! @azure/msal-common v9.1.1 2023-01-19 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from '../_virtual/_tslib.js';\nimport { BaseClient } from './BaseClient.js';\nimport { RequestParameterBuilder } from '../request/RequestParameterBuilder.js';\nimport { Separators, AADServerParamKeys, AuthenticationScheme, GrantType, PromptValue, HeaderNames } from '../utils/Constants.js';\nimport { ResponseHandler } from '../response/ResponseHandler.js';\nimport { StringUtils } from '../utils/StringUtils.js';\nimport { ClientAuthError } from '../error/ClientAuthError.js';\nimport { UrlString } from '../url/UrlString.js';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.js';\nimport { TimeUtils } from '../utils/TimeUtils.js';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { ClientConfigurationError } from '../error/ClientConfigurationError.js';\nimport { RequestValidator } from '../request/RequestValidator.js';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\nvar AuthorizationCodeClient = /** @class */function (_super) {\n  __extends(AuthorizationCodeClient, _super);\n  function AuthorizationCodeClient(configuration, performanceClient) {\n    var _this = _super.call(this, configuration, performanceClient) || this;\n    // Flag to indicate if client is for hybrid spa auth code redemption\n    _this.includeRedirectUri = true;\n    return _this;\n  }\n  /**\r\n   * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n   * application. The URL target the /authorize endpoint of the authority configured in the\r\n   * application object.\r\n   *\r\n   * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n   * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n   * acquireToken(AuthorizationCodeRequest)\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.getAuthCodeUrl = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryString;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.createAuthCodeUrlQueryString(request)];\n          case 1:\n            queryString = _a.sent();\n            return [2 /*return*/, UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString)];\n        }\n      });\n    });\n  };\n  /**\r\n   * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n   * authorization_code_grant\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.acquireToken = function (request, authCodePayload) {\n    var _a, _b, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var atsMeasurement, reqTimestamp, response, requestId, httpVerAuthority, responseHandler;\n      var _this = this;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            atsMeasurement = (_a = this.performanceClient) === null || _a === void 0 ? void 0 : _a.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\n            this.logger.info(\"in acquireToken call in auth-code client\");\n            if (!request || StringUtils.isEmpty(request.code)) {\n              throw ClientAuthError.createTokenRequestCannotBeMadeError();\n            }\n            reqTimestamp = TimeUtils.nowSeconds();\n            return [4 /*yield*/, this.executeTokenRequest(this.authority, request)];\n          case 1:\n            response = _d.sent();\n            requestId = (_b = response.headers) === null || _b === void 0 ? void 0 : _b[HeaderNames.X_MS_REQUEST_ID];\n            httpVerAuthority = (_c = response.headers) === null || _c === void 0 ? void 0 : _c[HeaderNames.X_MS_HTTP_VERSION];\n            if (httpVerAuthority) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.addStaticFields({\n                httpVerAuthority: httpVerAuthority\n              });\n            }\n            responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            // Validate response. This function throws a server error if an error is returned by the server.\n            responseHandler.validateTokenResponse(response.body);\n            return [2 /*return*/, responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId).then(function (result) {\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                success: true\n              });\n              return result;\n            }).catch(function (error) {\n              _this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\n              atsMeasurement === null || atsMeasurement === void 0 ? void 0 : atsMeasurement.endMeasurement({\n                errorCode: error.errorCode,\n                subErrorCode: error.subError,\n                success: false\n              });\n              throw error;\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Handles the hash fragment response from public client code request. Returns a code response used by\r\n   * the client to exchange for a token in acquireToken.\r\n   * @param hashFragment\r\n   */\n  AuthorizationCodeClient.prototype.handleFragmentResponse = function (hashFragment, cachedState) {\n    // Handle responses.\n    var responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\n    // Deserialize hash fragment response parameters.\n    var hashUrlString = new UrlString(hashFragment);\n    // Deserialize hash fragment response parameters.\n    var serverParams = UrlString.getDeserializedHash(hashUrlString.getHash());\n    // Get code response\n    responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\n    // throw when there is no auth code in the response\n    if (!serverParams.code) {\n      throw ClientAuthError.createNoAuthCodeInServerResponseError();\n    }\n    return __assign(__assign({}, serverParams), {\n      // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\n      code: serverParams.code\n    });\n  };\n  /**\r\n   * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n   * Default behaviour is to redirect the user to `window.location.href`.\r\n   * @param authorityUri\r\n   */\n  AuthorizationCodeClient.prototype.getLogoutUri = function (logoutRequest) {\n    // Throw error if logoutRequest is null/undefined\n    if (!logoutRequest) {\n      throw ClientConfigurationError.createEmptyLogoutRequestError();\n    }\n    var queryString = this.createLogoutUrlQueryString(logoutRequest);\n    // Construct logout URI\n    return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, queryParameters, ccsCredential, clientInfo, headers, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes,\n              claims: request.claims,\n              authenticationScheme: request.authenticationScheme,\n              resourceRequestMethod: request.resourceRequestMethod,\n              resourceRequestUri: request.resourceRequestUri,\n              shrClaims: request.shrClaims,\n              sshKid: request.sshKid\n            };\n            return [4 /*yield*/, this.createTokenRequestBody(request)];\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            ccsCredential = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCredential = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            }\n            headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\n            endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : authority.tokenEndpoint + \"?\" + queryParameters;\n            return [2 /*return*/, this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, clientAssertion, popTokenGenerator, reqCnfData, correlationId, ccsCred, clientInfo, clientInfo;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            /*\r\n             * For hybrid spa flow, there will be a code but no verifier\r\n             * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n             */\n            if (!this.includeRedirectUri) {\n              // Just validate\n              RequestValidator.validateRedirectUri(request.redirectUri);\n            } else {\n              // Validate and include redirect uri\n              parameterBuilder.addRedirectUri(request.redirectUri);\n            }\n            // Add scope array, parameter builder will add default scopes and dedupe\n            parameterBuilder.addScopes(request.scopes);\n            // add code: user set, not validated\n            parameterBuilder.addAuthorizationCode(request.code);\n            // Add library metadata\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            parameterBuilder.addThrottling();\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n            // add code_verifier if passed\n            if (request.codeVerifier) {\n              parameterBuilder.addCodeVerifier(request.codeVerifier);\n            }\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n            parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\n            parameterBuilder.addClientInfo();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _b.sent();\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\n            return [3 /*break*/, 3];\n          case 2:\n            if (request.authenticationScheme === AuthenticationScheme.SSH) {\n              if (request.sshJwk) {\n                parameterBuilder.addSshJwk(request.sshJwk);\n              } else {\n                throw ClientConfigurationError.createMissingSshJwkError();\n              }\n            }\n            _b.label = 3;\n          case 3:\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            ccsCred = undefined;\n            if (request.clientInfo) {\n              try {\n                clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\n                ccsCred = {\n                  credential: \"\" + clientInfo.uid + Separators.CLIENT_INFO_SEPARATOR + clientInfo.utid,\n                  type: CcsCredentialType.HOME_ACCOUNT_ID\n                };\n              } catch (e) {\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\n              }\n            } else {\n              ccsCred = request.ccsCredential;\n            }\n            // Adds these as parameters in the request instead of headers to prevent CORS preflight request\n            if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\n              switch (ccsCred.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n                  break;\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(ccsCred.credential);\n                  break;\n              }\n            }\n            if (request.tokenBodyParameters) {\n              parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\n            }\n            // Add hybrid spa parameters if not already provided\n            if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\n              parameterBuilder.addExtraQueryParameters((_a = {}, _a[AADServerParamKeys.RETURN_SPA_CODE] = \"1\", _a));\n            }\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createAuthCodeUrlQueryString = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, requestScopes, correlationId, accountSid, accountLoginHintClaim, clientInfo, clientInfo, clientInfo, popTokenGenerator, reqCnfData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            requestScopes = __spreadArrays(request.scopes || [], request.extraScopesToConsent || []);\n            parameterBuilder.addScopes(requestScopes);\n            // validate the redirectUri (to be a non null value)\n            parameterBuilder.addRedirectUri(request.redirectUri);\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            // add response_mode. If not passed in it defaults to query.\n            parameterBuilder.addResponseMode(request.responseMode);\n            // add response_type = code\n            parameterBuilder.addResponseTypeCode();\n            // add library info parameters\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\n            // add client_info=1\n            parameterBuilder.addClientInfo();\n            if (request.codeChallenge && request.codeChallengeMethod) {\n              parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\n            }\n            if (request.prompt) {\n              parameterBuilder.addPrompt(request.prompt);\n            }\n            if (request.domainHint) {\n              parameterBuilder.addDomainHint(request.domainHint);\n            }\n            // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\n            if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\n              // AAD will throw if prompt=select_account is passed with an account hint\n              if (request.sid && request.prompt === PromptValue.NONE) {\n                // SessionID is only used in silent calls\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\n                parameterBuilder.addSid(request.sid);\n              } else if (request.account) {\n                accountSid = this.extractAccountSid(request.account);\n                accountLoginHintClaim = this.extractLoginHint(request.account);\n                // If login_hint claim is present, use it over sid/username\n                if (accountLoginHintClaim) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\n                  parameterBuilder.addLoginHint(accountLoginHintClaim);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\n                  /*\r\n                   * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                   * SessionId is only used in silent calls\r\n                   */\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\n                  parameterBuilder.addSid(accountSid);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                } else if (request.loginHint) {\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\n                  parameterBuilder.addLoginHint(request.loginHint);\n                  parameterBuilder.addCcsUpn(request.loginHint);\n                } else if (request.account.username) {\n                  // Fallback to account username if provided\n                  this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\n                  parameterBuilder.addLoginHint(request.account.username);\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\n                  }\n                }\n              } else if (request.loginHint) {\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\n                parameterBuilder.addLoginHint(request.loginHint);\n                parameterBuilder.addCcsUpn(request.loginHint);\n              }\n            } else {\n              this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\n            }\n            if (request.nonce) {\n              parameterBuilder.addNonce(request.nonce);\n            }\n            if (request.state) {\n              parameterBuilder.addState(request.state);\n            }\n            if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n            if (request.extraQueryParameters) {\n              parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n            }\n            if (!request.nativeBroker) return [3 /*break*/, 2];\n            // signal ests that this is a WAM call\n            parameterBuilder.addNativeBroker();\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3 /*break*/, 2];\n            popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\n            return [4 /*yield*/, popTokenGenerator.generateCnf(request)];\n          case 1:\n            reqCnfData = _a.sent();\n            parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\n            _a.label = 2;\n          case 2:\n            return [2 /*return*/, parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n  /**\r\n   * This API validates the `EndSessionRequest` and creates a URL\r\n   * @param request\r\n   */\n  AuthorizationCodeClient.prototype.createLogoutUrlQueryString = function (request) {\n    var parameterBuilder = new RequestParameterBuilder();\n    if (request.postLogoutRedirectUri) {\n      parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\n    }\n    if (request.correlationId) {\n      parameterBuilder.addCorrelationId(request.correlationId);\n    }\n    if (request.idTokenHint) {\n      parameterBuilder.addIdTokenHint(request.idTokenHint);\n    }\n    if (request.state) {\n      parameterBuilder.addState(request.state);\n    }\n    if (request.logoutHint) {\n      parameterBuilder.addLogoutHint(request.logoutHint);\n    }\n    if (request.extraQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\n    }\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n   * @param account\r\n   */\n  AuthorizationCodeClient.prototype.extractAccountSid = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.sid) || null;\n  };\n  AuthorizationCodeClient.prototype.extractLoginHint = function (account) {\n    var _a;\n    return ((_a = account.idTokenClaims) === null || _a === void 0 ? void 0 : _a.login_hint) || null;\n  };\n  return AuthorizationCodeClient;\n}(BaseClient);\nexport { AuthorizationCodeClient };","map":{"version":3,"mappings":"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","names":["__extends","AuthorizationCodeClient","performanceClient","_super","_this","request","createAuthCodeUrlQueryString","queryString","_a","UrlString","appendQueryString","authority","authorizationEndpoint","authCodePayload","atsMeasurement","correlationId","logger","info","StringUtils","isEmpty","code","ClientAuthError","createTokenRequestCannotBeMadeError","reqTimestamp","TimeUtils","nowSeconds","executeTokenRequest","response","_d","requestId","headers","HeaderNames","X_MS_REQUEST_ID","httpVerAuthority","X_MS_HTTP_VERSION","addStaticFields","responseHandler","ResponseHandler","config","authOptions","clientId","cacheManager","cryptoUtils","serializableCache","persistencePlugin","validateTokenResponse","body","handleServerTokenResponse","undefined","then","result","endMeasurement","success","catch","error","verbose","errorCode","subErrorCode","subError","hashFragment","cachedState","hashUrlString","serverParams","getDeserializedHash","getHash","validateServerAuthorizationCodeResponse","createNoAuthCodeInServerResponseError","logoutRequest","ClientConfigurationError","createEmptyLogoutRequestError","createLogoutUrlQueryString","endSessionEndpoint","thumbprint","canonicalAuthority","scopes","claims","authenticationScheme","resourceRequestMethod","resourceRequestUri","shrClaims","sshKid","createTokenRequestBody","requestBody","queryParameters","createTokenQueryParameters","ccsCredential","clientInfo","buildClientInfo","credential","uid","Separators","CLIENT_INFO_SEPARATOR","utid","type","CcsCredentialType","HOME_ACCOUNT_ID","e","createTokenRequestHeaders","endpoint","tokenEndpoint","executePostToTokenEndpoint","parameterBuilder","RequestParameterBuilder","tokenQueryParameters","addExtraQueryParameters","createQueryString","addClientId","includeRedirectUri","RequestValidator","validateRedirectUri","redirectUri","addRedirectUri","addScopes","addAuthorizationCode","addLibraryInfo","libraryInfo","addApplicationTelemetry","telemetry","application","addThrottling","serverTelemetryManager","addServerTelemetry","codeVerifier","addCodeVerifier","clientCredentials","clientSecret","addClientSecret","clientAssertion","addClientAssertion","assertion","addClientAssertionType","assertionType","addGrantType","GrantType","AUTHORIZATION_CODE_GRANT","addClientInfo","AuthenticationScheme","POP","popTokenGenerator","PopTokenGenerator","generateCnf","reqCnfData","_b","addPopToken","reqCnfString","SSH","sshJwk","addSshJwk","createMissingSshJwkError","cryptoInterface","createNewGuid","addCorrelationId","isEmptyObj","clientCapabilities","length","addClaims","ccsCred","systemOptions","preventCorsPreflight","buildClientInfoFromHomeAccountId","addCcsOid","UPN","addCcsUpn","tokenBodyParameters","enableSpaAuthorizationCode","AADServerParamKeys","RETURN_SPA_CODE","requestScopes","__spreadArrays","extraScopesToConsent","addResponseMode","responseMode","addResponseTypeCode","codeChallenge","codeChallengeMethod","addCodeChallengeParams","prompt","addPrompt","domainHint","addDomainHint","PromptValue","SELECT_ACCOUNT","sid","NONE","addSid","account","accountSid","extractAccountSid","accountLoginHintClaim","extractLoginHint","addLoginHint","homeAccountId","loginHint","username","nonce","addNonce","state","addState","extraQueryParameters","nativeBroker","addNativeBroker","reqCnfHash","postLogoutRedirectUri","addPostLogoutRedirectUri","idTokenHint","addIdTokenHint","logoutHint","addLogoutHint","idTokenClaims","login_hint","BaseClient"],"sources":["/home/user/mischangas/node_modules/@azure/msal-common/src/client/AuthorizationCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonAuthorizationUrlRequest } from \"../request/CommonAuthorizationUrlRequest\";\r\nimport { CommonAuthorizationCodeRequest } from \"../request/CommonAuthorizationCodeRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, PromptValue, Separators, AADServerParamKeys, HeaderNames } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { ServerAuthorizationCodeResponse } from \"../response/ServerAuthorizationCodeResponse\";\r\nimport { CommonEndSessionRequest } from \"../request/CommonEndSessionRequest\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { AuthorizationCodePayload } from \"../response/AuthorizationCodePayload\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { AccountInfo } from \"../account/AccountInfo\";\r\nimport { buildClientInfoFromHomeAccountId, buildClientInfo } from \"../account/ClientInfo\";\r\nimport { CcsCredentialType, CcsCredential } from \"../account/CcsCredential\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { RequestValidator } from \"../request/RequestValidator\";\r\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient\";\r\n\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n */\r\nexport class AuthorizationCodeClient extends BaseClient {\r\n    // Flag to indicate if client is for hybrid spa auth code redemption\r\n    protected includeRedirectUri: boolean = true;\r\n\r\n    constructor(configuration: ClientConfiguration, performanceClient?: IPerformanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n\r\n    /**\r\n     * Creates the URL of the authorization request letting the user input credentials and consent to the\r\n     * application. The URL target the /authorize endpoint of the authority configured in the\r\n     * application object.\r\n     *\r\n     * Once the user inputs their credentials and consents, the authority will send a response to the redirect URI\r\n     * sent in the request and should contain an authorization code, which can then be used to acquire tokens via\r\n     * acquireToken(AuthorizationCodeRequest)\r\n     * @param request\r\n     */\r\n    async getAuthCodeUrl(request: CommonAuthorizationUrlRequest): Promise<string> {\r\n        const queryString = await this.createAuthCodeUrlQueryString(request);\r\n\r\n        return UrlString.appendQueryString(this.authority.authorizationEndpoint, queryString);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonAuthorizationCodeRequest, authCodePayload?: AuthorizationCodePayload): Promise<AuthenticationResult> {\r\n        \r\n        // @ts-ignore\r\n        const atsMeasurement = this.performanceClient?.startMeasurement(\"AuthCodeClientAcquireToken\", request.correlationId);\r\n        this.logger.info(\"in acquireToken call in auth-code client\");\r\n        if (!request || StringUtils.isEmpty(request.code)) {\r\n            throw ClientAuthError.createTokenRequestCannotBeMadeError();\r\n        }\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const httpVerAuthority = response.headers?.[HeaderNames.X_MS_HTTP_VERSION];\r\n        if(httpVerAuthority)\r\n        {\r\n            atsMeasurement?.addStaticFields({\r\n                httpVerAuthority\r\n            });\r\n        }\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return  responseHandler.handleServerTokenResponse(response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            authCodePayload,\r\n            undefined,\r\n            undefined,\r\n            undefined,\r\n            requestId,\r\n        ).then((result: AuthenticationResult) => {\r\n            atsMeasurement?.endMeasurement({\r\n                success: true\r\n            });\r\n            return result;\r\n        })\r\n            .catch((error) => {\r\n                this.logger.verbose(\"Error in fetching token in ACC\", request.correlationId);\r\n                atsMeasurement?.endMeasurement({\r\n                    errorCode: error.errorCode,\r\n                    subErrorCode: error.subError,\r\n                    success: false\r\n                });\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles the hash fragment response from public client code request. Returns a code response used by\r\n     * the client to exchange for a token in acquireToken.\r\n     * @param hashFragment\r\n     */\r\n    handleFragmentResponse(hashFragment: string, cachedState: string): AuthorizationCodePayload {\r\n        // Handle responses.\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, null, null);\r\n\r\n        // Deserialize hash fragment response parameters.\r\n        const hashUrlString = new UrlString(hashFragment);\r\n        // Deserialize hash fragment response parameters.\r\n        const serverParams: ServerAuthorizationCodeResponse = UrlString.getDeserializedHash(hashUrlString.getHash());\r\n\r\n        // Get code response\r\n        responseHandler.validateServerAuthorizationCodeResponse(serverParams, cachedState, this.cryptoUtils);\r\n\r\n        // throw when there is no auth code in the response\r\n        if (!serverParams.code) {\r\n            throw ClientAuthError.createNoAuthCodeInServerResponseError();\r\n        }\r\n        return {\r\n            ...serverParams,\r\n            // Code param is optional in ServerAuthorizationCodeResponse but required in AuthorizationCodePaylod\r\n            code: serverParams.code\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest: CommonEndSessionRequest): string {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw ClientConfigurationError.createEmptyLogoutRequestError();\r\n        }\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonAuthorizationCodeRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes,\r\n            claims: request.claims,\r\n            authenticationScheme: request.authenticationScheme,\r\n            resourceRequestMethod: request.resourceRequestMethod,\r\n            resourceRequestUri: request.resourceRequestUri,\r\n            shrClaims: request.shrClaims,\r\n            sshKid: request.sshKid\r\n        };\r\n\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const queryParameters = this.createTokenQueryParameters(request);\r\n        let ccsCredential: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n        const endpoint = StringUtils.isEmpty(queryParameters) ? authority.tokenEndpoint : `${authority.tokenEndpoint}?${queryParameters}`;\r\n\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    private createTokenQueryParameters(request: CommonAuthorizationCodeRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonAuthorizationCodeRequest): Promise<string> {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */\r\n        if (!this.includeRedirectUri) {\r\n            // Just validate\r\n            RequestValidator.validateRedirectUri(request.redirectUri);\r\n        } else {\r\n            // Validate and include redirect uri\r\n            parameterBuilder.addRedirectUri(request.redirectUri);\r\n        }\r\n\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        // add code: user set, not validated\r\n        parameterBuilder.addAuthorizationCode(request.code);\r\n\r\n        // Add library metadata\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            parameterBuilder.addCodeVerifier(request.codeVerifier);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        parameterBuilder.addGrantType(GrantType.AUTHORIZATION_CODE_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n            const reqCnfData = await popTokenGenerator.generateCnf(request);\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            parameterBuilder.addPopToken(reqCnfData.reqCnfString);\r\n        } else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                parameterBuilder.addSshJwk(request.sshJwk);\r\n            } else {\r\n                throw ClientConfigurationError.createMissingSshJwkError();\r\n            }\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        let ccsCred: CcsCredential | undefined = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils);\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID\r\n                };\r\n            } catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        } else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (request.tokenBodyParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenBodyParameters);\r\n        }\r\n\r\n        // Add hybrid spa parameters if not already provided\r\n        if (request.enableSpaAuthorizationCode && (!request.tokenBodyParameters || !request.tokenBodyParameters[AADServerParamKeys.RETURN_SPA_CODE])) {\r\n            parameterBuilder.addExtraQueryParameters({\r\n                [AADServerParamKeys.RETURN_SPA_CODE]: \"1\"\r\n            });\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `AuthorizationCodeUrlRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private async createAuthCodeUrlQueryString(request: CommonAuthorizationUrlRequest): Promise<string> {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        const requestScopes = [...request.scopes || [], ...request.extraScopesToConsent || []];\r\n        parameterBuilder.addScopes(requestScopes);\r\n\r\n        // validate the redirectUri (to be a non null value)\r\n        parameterBuilder.addRedirectUri(request.redirectUri);\r\n\r\n        // generate the correlationId if not set by the user and add\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        // add response_mode. If not passed in it defaults to query.\r\n        parameterBuilder.addResponseMode(request.responseMode);\r\n\r\n        // add response_type = code\r\n        parameterBuilder.addResponseTypeCode();\r\n\r\n        // add library info parameters\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n        parameterBuilder.addApplicationTelemetry(this.config.telemetry.application);\r\n\r\n        // add client_info=1\r\n        parameterBuilder.addClientInfo();\r\n\r\n        if (request.codeChallenge && request.codeChallengeMethod) {\r\n            parameterBuilder.addCodeChallengeParams(request.codeChallenge, request.codeChallengeMethod);\r\n        }\r\n\r\n        if (request.prompt) {\r\n            parameterBuilder.addPrompt(request.prompt);\r\n        }\r\n\r\n        if (request.domainHint) {\r\n            parameterBuilder.addDomainHint(request.domainHint);\r\n        }\r\n\r\n        // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n        if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n            // AAD will throw if prompt=select_account is passed with an account hint\r\n            if (request.sid && request.prompt === PromptValue.NONE) {\r\n                // SessionID is only used in silent calls\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n                parameterBuilder.addSid(request.sid);\r\n            } else if (request.account) {\r\n                const accountSid = this.extractAccountSid(request.account);\r\n                const accountLoginHintClaim = this.extractLoginHint(request.account);\r\n                // If login_hint claim is present, use it over sid/username\r\n                if (accountLoginHintClaim) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                    parameterBuilder.addLoginHint(accountLoginHintClaim);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                    }\r\n                } else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                    /*\r\n                     * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                     * SessionId is only used in silent calls\r\n                     */\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                    parameterBuilder.addSid(accountSid);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                    }\r\n                } else if (request.loginHint) {\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                    parameterBuilder.addLoginHint(request.loginHint);\r\n                    parameterBuilder.addCcsUpn(request.loginHint);\r\n                } else if (request.account.username) {\r\n                    // Fallback to account username if provided\r\n                    this.logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                    parameterBuilder.addLoginHint(request.account.username);\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                    }\r\n                }\r\n            } else if (request.loginHint) {\r\n                this.logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n                parameterBuilder.addLoginHint(request.loginHint);\r\n                parameterBuilder.addCcsUpn(request.loginHint);\r\n            }\r\n        } else {\r\n            this.logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n        }\r\n\r\n        if (request.nonce) {\r\n            parameterBuilder.addNonce(request.nonce);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        if (request.nativeBroker) {\r\n            // signal ests that this is a WAM call\r\n            parameterBuilder.addNativeBroker();\r\n\r\n            // pass the req_cnf for POP\r\n            if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n                const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n                // to reduce the URL length, it is recommended to send the hash of the req_cnf instead of the whole string\r\n                const reqCnfData = await popTokenGenerator.generateCnf(request);\r\n                parameterBuilder.addPopToken(reqCnfData.reqCnfHash);\r\n            }\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    private createLogoutUrlQueryString(request: CommonEndSessionRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.postLogoutRedirectUri) {\r\n            parameterBuilder.addPostLogoutRedirectUri(request.postLogoutRedirectUri);\r\n        }\r\n\r\n        if (request.correlationId) {\r\n            parameterBuilder.addCorrelationId(request.correlationId);\r\n        }\r\n\r\n        if (request.idTokenHint) {\r\n            parameterBuilder.addIdTokenHint(request.idTokenHint);\r\n        }\r\n\r\n        if (request.state) {\r\n            parameterBuilder.addState(request.state);\r\n        }\r\n\r\n        if (request.logoutHint) {\r\n            parameterBuilder.addLogoutHint(request.logoutHint);\r\n        }\r\n\r\n        if (request.extraQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.extraQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n     * @param account\r\n     */\r\n    private extractAccountSid(account: AccountInfo): string | null {\r\n        return account.idTokenClaims?.sid || null;\r\n    }\r\n\r\n    private extractLoginHint(account: AccountInfo): string | null {\r\n        return account.idTokenClaims?.login_hint || null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}